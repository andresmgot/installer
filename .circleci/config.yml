version: 2

## Definitions
install_gcloud_sdk: &install_gcloud_sdk
  run: |
    if [ ! -d ${HOME}/google-cloud-sdk/bin ]; then
      rm -rf $HOME/google-cloud-sdk;
      curl https://sdk.cloud.google.com | bash;
    fi  
exports: &exports
  run: |
    # It is not possible to resolve env vars in the environment section:
    # https://circleci.com/docs/2.0/env-vars/#using-bash_env-to-set-environment-variables
    echo "export VERSION=${CIRCLE_TAG:-build-$CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
    echo "export PATH=$PATH:${HOME}/google-cloud-sdk/bin" >> $BASH_ENV
build_image: &build_image
  machine: true
  working_directory: /home/circleci/.go_workspace/src/github.com/kubeapps/kubeapps
  environment:
    GOPATH: /home/circleci/.go_workspace
  steps:
    - checkout
    - <<: *exports
    - run: make VERSION="$VERSION" $IMAGE
    - run: |
        if [[ -z "$CIRCLE_PULL_REQUEST" ]]; then
          docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
          if [[ -n "$CIRCLE_TAG" ]]; then
            docker push $IMAGE:$VERSION
          fi
          if [[ "$CIRCLE_BRANCH" == "master"  ]]; then
            docker tag $IMAGE:$VERSION $IMAGE:latest
            docker push $IMAGE:latest
          fi
        fi
###

workflows:
  version: 2
  kubeapps:
    jobs:
      # - test_and_build_go
      # - test_nodejs
      # - build_chartrepo:
      #     requires:
      #       - test_and_build_go
      # - build_chartsvc:
      #     requires:
      #       - test_and_build_go
      # - build_chart_apprepository:
      #     requires:
      #       - test_and_build_go
      # - build_dashboard:
      #     requires:
      #       - test_nodejs
      # - build_tiller_proxy:
      #     requires:
      #       - test_and_build_go
      - GKE
          # requires:
          #   - build_chartrepo
          #   - build_chartsvc
          #   - build_chart_apprepository
          #   - build_dashboard
          #   - build_tiller_proxy
      # - release:
      #     requires:
      #       - GKE

jobs:
  test_and_build_go:
    working_directory: /go/src/github.com/kubeapps/kubeapps
    environment:
      CGO_ENABLED: "0"
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
    docker:
      - image: circleci/golang:1.9 
    steps:
      - checkout
      - <<: *exports
      # Install kubecfg
      - run: |
          if ! which kubecfg; then
            wget -O kubecfg https://github.com/ksonnet/kubecfg/releases/download/v0.7.2/kubecfg-$(go env GOOS)-$(go env GOARCH)
            install -m 755 kubecfg $GOPATH/bin/kubecfg
          fi
      - <<: *install_gcloud_sdk
      - run: make test
      - run: BINARY=bin/kubeapps-linux-amd64 make
      - run: BINARY=bin/kubeapps-darwin-amd64 GOOS=darwin GOARCH=amd64 make
      - run: BINARY=bin/kubeapps-windows-amd64.exe GOOS=windows GOARCH=amd64 make
      - store_artifacts:
          path: bin
      - persist_to_workspace:
          root: /go/src/github.com/kubeapps/kubeapps
          paths: 
            - bin
  test_nodejs:
    docker:
      - image: circleci/node:8 
    steps:
      - checkout
      - run: yarn install --cwd=dashboard --frozen-lockfile
      - run: yarn --cwd=dashboard run lint
      - run: yarn --cwd=dashboard run test --maxWorkers=4 --coverage
  build_chartrepo:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/chart-repo
  build_chartsvc:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/chartsvc
  build_chart_apprepository:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/apprepository-controller
  build_dashboard:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/dashboard
  build_tiller_proxy:
    <<: *build_image
    environment:
      - IMAGE=kubeapps/tiller-proxy
  release:
    docker:
      - image: circleci/golang:1.9 
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/kubeapps
      - run: |
          if [[ -n "$CIRCLE_TAG" ]]; then
            REPO_DOMAIN=kubeapps REPO_NAME=kubeapps ./script/create_release.sh ${CIRCLE_TAG} /tmp/kubeapps/bin
          fi
  GKE:
    docker:
      - image: circleci/golang:1.9
    environment:
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
      GKE_VERSION: 1.9.7-gke.3
      HELM_VERSION: v2.9.1
    steps:
      - run: |
          # In case of GKE we will only want to build if it is
          # a build of a branch in the kubeapps repository
          if [[ -z "$GKE_ADMIN" || -n "$CIRCLE_PULL_REQUESTS" ]]; then
            circleci step halt
          fi
      - checkout
      - <<: *exports
      - <<: *install_gcloud_sdk
      # Install kubectl
      - run: gcloud components install kubectl
      - setup_remote_docker
      - run: |
          gcloud -q config set project $GKE_PROJECT
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/client_secrets.json
          echo $GCLOUD_KEY > $GOOGLE_APPLICATION_CREDENTIALS
          if [ -a $GOOGLE_APPLICATION_CREDENTIALS ]; then
            gcloud -q auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS;
          fi
      - run: echo "export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-${CIRCLE_BRANCH:-$CIRCLE_TAG}-ci | sed 's/[^a-z0-9-]//g')" >> $BASH_ENV
      - run: ./script/start-gke-env.sh $ESCAPED_GKE_CLUSTER $GKE_ZONE $GKE_VERSION $GKE_ADMIN > /dev/null
      # Install helm
      - run: |
          wget https://storage.googleapis.com/kubernetes-helm/helm-$HELM_VERSION-linux-amd64.tar.gz
          tar zxf helm-$HELM_VERSION-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/
          helm init
      - run: ./script/e2e-test.sh
