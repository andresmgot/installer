// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a basic deployment with a disk size 1`] = `
<BasicDeploymentForm
  handleBasicFormParamChange={[Function]}
  params={
    Object {
      "diskSize": Object {
        "path": "size",
        "type": "string",
        "value": "10Gi",
      },
    }
  }
>
  <DiskSizeParam
    handleBasicFormParamChange={[Function]}
    id="diskSize-0"
    key="diskSize-0"
    label="Disk Size"
    name="diskSize"
    param={
      Object {
        "path": "size",
        "type": "string",
        "value": "10Gi",
      }
    }
  >
    <div>
      <label
        htmlFor="diskSize-0"
      >
        Disk Size
        <div
          className="row"
        >
          <div
            className="col-10"
          >
            <Slider
              default={10}
              max={100}
              min={1}
              onChange={[Function]}
              onUpdate={[Function]}
              values={10}
            >
              <Slider
                component="div"
                disabled={false}
                domain={
                  Array [
                    1,
                    100,
                  ]
                }
                flatten={false}
                mode={1}
                onChange={[Function]}
                onSlideEnd={[Function]}
                onSlideStart={[Function]}
                onUpdate={[Function]}
                reversed={false}
                rootProps={Object {}}
                rootStyle={
                  Object {
                    "margin": "1em",
                    "position": "relative",
                    "width": "90%",
                  }
                }
                step={1}
                values={
                  Array [
                    10,
                  ]
                }
                vertical={false}
                warnOnChanges={false}
              >
                <div
                  style={
                    Object {
                      "margin": "1em",
                      "position": "relative",
                      "width": "90%",
                    }
                  }
                >
                  <Rail
                    activeHandleID={null}
                    emitKeyboard={[Function]}
                    emitMouse={[Function]}
                    emitTouch={[Function]}
                    getEventData={[Function]}
                    handles={
                      Array [
                        Object {
                          "id": "$$-0",
                          "percent": 9.090909090909092,
                          "value": 10,
                        },
                      ]
                    }
                    key=".0"
                    scale={
                      LinearScale {
                        "domain": Array [
                          1,
                          100,
                        ],
                        "interpolator": [Function],
                        "range": Array [
                          0,
                          100,
                        ],
                      }
                    }
                  >
                    <div
                      onMouseDown={[Function]}
                      onTouchStart={[Function]}
                      style={
                        Object {
                          "backgroundColor": "rgb(155,155,155)",
                          "borderRadius": 7,
                          "cursor": "pointer",
                          "height": 14,
                          "position": "absolute",
                          "width": "100%",
                        }
                      }
                    />
                  </Rail>
                  <Handles
                    activeHandleID={null}
                    emitKeyboard={[Function]}
                    emitMouse={[Function]}
                    emitTouch={[Function]}
                    getEventData={[Function]}
                    handles={
                      Array [
                        Object {
                          "id": "$$-0",
                          "percent": 9.090909090909092,
                          "value": 10,
                        },
                      ]
                    }
                    key=".1"
                    scale={
                      LinearScale {
                        "domain": Array [
                          1,
                          100,
                        ],
                        "interpolator": [Function],
                        "range": Array [
                          0,
                          100,
                        ],
                      }
                    }
                  >
                    <div
                      className="slider-handles"
                    >
                      <Component
                        domain={
                          Array [
                            1,
                            100,
                          ]
                        }
                        getHandleProps={[Function]}
                        handle={
                          Object {
                            "id": "$$-0",
                            "percent": 9.090909090909092,
                            "value": 10,
                          }
                        }
                        key="$$-0"
                      >
                        <div
                          aria-valuemax={100}
                          aria-valuemin={1}
                          aria-valuenow={10}
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchStart={[Function]}
                          role="slider"
                          style={
                            Object {
                              "backgroundColor": "#34568f",
                              "borderRadius": "50%",
                              "boxShadow": "1px 1px 1px 1px rgba(0, 0, 0, 0.2)",
                              "cursor": "pointer",
                              "height": 24,
                              "left": "9.090909090909092%",
                              "marginLeft": "-11px",
                              "marginTop": "-6px",
                              "position": "absolute",
                              "width": 24,
                              "zIndex": 2,
                            }
                          }
                        />
                      </Component>
                    </div>
                  </Handles>
                  <Tracks
                    activeHandleID={null}
                    emitKeyboard={[Function]}
                    emitMouse={[Function]}
                    emitTouch={[Function]}
                    getEventData={[Function]}
                    handles={
                      Array [
                        Object {
                          "id": "$$-0",
                          "percent": 9.090909090909092,
                          "value": 10,
                        },
                      ]
                    }
                    key=".2"
                    left={true}
                    right={false}
                    scale={
                      LinearScale {
                        "domain": Array [
                          1,
                          100,
                        ],
                        "interpolator": [Function],
                        "range": Array [
                          0,
                          100,
                        ],
                      }
                    }
                  >
                    <div
                      className="slider-tracks"
                    >
                      <Component
                        getTrackProps={[Function]}
                        key="$-$$-0"
                        source={
                          Object {
                            "id": "$",
                            "percent": 0,
                            "value": 1,
                          }
                        }
                        target={
                          Object {
                            "id": "$$-0",
                            "percent": 9.090909090909092,
                            "value": 10,
                          }
                        }
                      >
                        <div
                          onMouseDown={[Function]}
                          onTouchStart={[Function]}
                          style={
                            Object {
                              "backgroundColor": "#7aa0c4",
                              "borderRadius": 7,
                              "cursor": "pointer",
                              "height": 14,
                              "left": "0%",
                              "position": "absolute",
                              "width": "9.090909090909092%",
                              "zIndex": 1,
                            }
                          }
                        />
                      </Component>
                    </div>
                  </Tracks>
                </div>
              </Slider>
            </Slider>
          </div>
          <div
            className="col-2"
          >
            <input
              className="disk_size_input"
              id="diskSize-0"
              onChange={[Function]}
              value={10}
            />
            <span
              className="margin-l-normal"
            >
              Gi
            </span>
          </div>
        </div>
      </label>
    </div>
  </DiskSizeParam>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a email 1`] = `
<BasicDeploymentForm
  handleBasicFormParamChange={[Function]}
  params={
    Object {
      "email": Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      },
    }
  }
>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="email-0"
    key="email-0"
    label="Email"
    name="email"
    param={
      Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      }
    }
  >
    <div>
      <label
        htmlFor="email-0"
      >
        Email
        <input
          id="email-0"
          onChange={[Function]}
          value="user@example.com"
        />
      </label>
    </div>
  </StringParam>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic string 1`] = `
<BasicDeploymentForm
  handleBasicFormParamChange={[Function]}
  params={
    Object {
      "blogName": Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      },
    }
  }
>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="blogName-0"
    key="blogName-0"
    label=""
    name="blogName"
    param={
      Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      }
    }
  >
    <div>
      <label
        htmlFor="blogName-0"
      >
        <input
          id="blogName-0"
          onChange={[Function]}
          value="my-blog"
        />
      </label>
    </div>
  </StringParam>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a password 1`] = `
<BasicDeploymentForm
  handleBasicFormParamChange={[Function]}
  params={
    Object {
      "password": Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      },
    }
  }
>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="password-0"
    key="password-0"
    label="Password"
    name="password"
    param={
      Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      }
    }
  >
    <div>
      <label
        htmlFor="password-0"
      >
        Password
        <input
          id="password-0"
          onChange={[Function]}
          value="sserpdrow"
        />
      </label>
    </div>
  </StringParam>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a username 1`] = `
<BasicDeploymentForm
  handleBasicFormParamChange={[Function]}
  params={
    Object {
      "username": Object {
        "path": "wordpressUsername",
        "value": "user",
      },
    }
  }
>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="username-0"
    key="username-0"
    label="Username"
    name="username"
    param={
      Object {
        "path": "wordpressUsername",
        "value": "user",
      }
    }
  >
    <div>
      <label
        htmlFor="username-0"
      >
        Username
        <input
          id="username-0"
          onChange={[Function]}
          value="user"
        />
      </label>
    </div>
  </StringParam>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with username, password, email and a generic string 1`] = `
<BasicDeploymentForm
  handleBasicFormParamChange={[Function]}
  params={
    Object {
      "blogName": Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      },
      "email": Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      },
      "password": Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      },
      "username": Object {
        "path": "wordpressUsername",
        "value": "user",
      },
    }
  }
>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="username-0"
    key="username-0"
    label="Username"
    name="username"
    param={
      Object {
        "path": "wordpressUsername",
        "value": "user",
      }
    }
  >
    <div>
      <label
        htmlFor="username-0"
      >
        Username
        <input
          id="username-0"
          onChange={[Function]}
          value="user"
        />
      </label>
    </div>
  </StringParam>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="password-1"
    key="password-1"
    label="Password"
    name="password"
    param={
      Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      }
    }
  >
    <div>
      <label
        htmlFor="password-1"
      >
        Password
        <input
          id="password-1"
          onChange={[Function]}
          value="sserpdrow"
        />
      </label>
    </div>
  </StringParam>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="email-2"
    key="email-2"
    label="Email"
    name="email"
    param={
      Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      }
    }
  >
    <div>
      <label
        htmlFor="email-2"
      >
        Email
        <input
          id="email-2"
          onChange={[Function]}
          value="user@example.com"
        />
      </label>
    </div>
  </StringParam>
  <StringParam
    handleBasicFormParamChange={[Function]}
    id="blogName-3"
    key="blogName-3"
    label=""
    name="blogName"
    param={
      Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      }
    }
  >
    <div>
      <label
        htmlFor="blogName-3"
      >
        <input
          id="blogName-3"
          onChange={[Function]}
          value="my-blog"
        />
      </label>
    </div>
  </StringParam>
</BasicDeploymentForm>
`;
