// Code generated by go-bindata.
// sources:
// ../lib/kubecfg.libsonnet
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libKubecfgLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xef\x6f\xdb\x36\x14\xfc\xee\xbf\xe2\x60\xec\x83\x5d\x38\x76\x5b\x0c\x18\xe0\xa2\xc0\xdc\x5f\x98\xbb\xd6\xc1\xec\x74\x45\xbe\xe5\x99\x7a\x92\xd8\x52\xa4\x46\x52\x76\x8c\x61\xff\xfb\x40\x52\xb2\xe5\x38\x01\x02\x04\x41\x42\xf2\x9d\xee\xee\x9d\xf8\x34\x9b\xe1\xbd\xa9\x0f\x56\x16\xa5\xc7\xeb\x97\xaf\x7e\xc3\x4d\xc9\xf8\xd9\x6c\x59\xe4\x05\xa8\xf1\xa5\xb1\x6e\x30\x9b\xa5\x1f\x00\xf8\x22\x05\x6b\xc7\x19\x1a\x9d\xb1\x85\x2f\x19\x8b\x9a\x44\xc9\xdd\xce\x04\x7f\xb3\x75\xd2\x68\xbc\x9e\xbe\xc4\x28\x1c\x18\xb6\x5b\xc3\xf1\x9b\x16\xe5\x60\x1a\x54\x74\x80\x36\x1e\x8d\x63\xf8\x52\x3a\xe4\x52\x31\xf8\x5e\x70\xed\x21\x35\x84\xa9\x6a\x25\x49\x0b\xc6\x5e\xfa\x32\x3e\xaa\x05\x9a\xb6\x30\xb7\x2d\x8c\xd9\x7a\x92\x1a\x04\x61\xea\x03\x4c\xde\x3f\x0b\xf2\x27\xf6\x40\xe9\x7d\x3d\x9f\xcd\xf6\xfb\xfd\x94\x22\xef\xa9\xb1\xc5\x4c\xa5\xb3\x6e\xf6\x65\xf9\xfe\xe3\x6a\xf3\xf1\xea\xf5\xf4\xe5\xa9\xea\x9b\x56\xec\x1c\x2c\xff\xd3\x48\xcb\x19\xb6\x07\x50\x5d\x2b\x29\x68\xab\x18\x8a\xf6\x30\x16\x54\x58\xe6\x0c\xde\x04\xee\x7b\x2b\xbd\xd4\xc5\x04\xce\xe4\x7e\x4f\x96\x5b\xa4\x4c\x3a\x6f\xe5\xb6\xf1\x67\x06\x76\x4c\xa5\x3b\x3b\x60\x34\x48\x63\xb8\xd8\x60\xb9\x19\xe2\xdd\x62\xb3\xdc\x4c\x5a\x9c\xef\xcb\x9b\x3f\xae\xbf\xdd\xe0\xfb\x62\xbd\x5e\xac\x6e\x96\x1f\x37\xb8\x5e\xe3\xfd\xf5\xea\xc3\xf2\x66\x79\xbd\xda\xe0\xfa\x13\x16\xab\x5b\xfc\xb9\x5c\x7d\x98\x80\xa5\x2f\xd9\x82\xef\x6b\x1b\x74\x18\x0b\x19\xac\xe5\xac\xf3\x71\xc3\x7c\x46\x24\x37\x89\x98\xab\x59\xc8\x5c\x0a\x28\xd2\x45\x43\x05\xa3\x30\x3b\xb6\x5a\xea\x02\x35\xdb\x4a\xba\xd0\x68\x07\xd2\x59\x8b\xa4\x64\x25\x3d\xf9\xb8\x7a\x21\x70\x3a\x08\xa7\x56\xef\xe6\x50\x72\xfb\xc3\x19\xad\xd9\x43\x93\x97\x3b\x46\xde\x68\x91\xca\x04\x69\x18\xad\x0e\xa8\xc9\x39\xd4\x36\x20\x86\x13\xfe\x50\xb3\x0b\x8e\x06\x10\x67\xaa\x7e\x4d\x00\xbb\x62\x2d\x4c\x96\x84\x90\x2d\xa6\x08\x59\x76\x8c\xe1\x8b\x4f\xd6\x54\x9f\x9d\xd1\xc3\x53\x45\xc0\xd8\x4b\xa5\xb0\x65\x58\xae\x15\x89\xd4\x57\xcb\x45\xa3\xc8\x76\xac\x76\x6d\x94\xf7\x25\xeb\x3e\x69\xe9\x10\x7a\x1f\x50\xbc\x81\x6b\xea\xda\x58\x1f\x53\x1c\x1f\xdb\x85\x39\xf4\x72\xc7\x2e\x9c\x29\x65\xd6\xc6\x3c\x78\xcf\x15\xeb\x64\x53\x80\xc8\xd8\x93\x54\xd3\xc1\xe0\xdf\x01\x30\x9b\xa1\x26\xeb\x38\x10\x1e\x65\xe4\x69\x3c\x4f\x0b\x2e\x2a\xbb\x0b\x4b\x77\x11\x59\x17\x20\x07\x8a\xe2\x91\x19\xd1\x04\xd0\x49\x6c\x46\x84\xb1\xec\x1b\xab\x53\x99\x65\xd7\xa8\x10\x49\x74\x12\xcc\xf6\x07\x0b\x3f\x1d\xe0\xf4\xb8\xf9\x1c\xce\x67\xd3\xa4\x7d\x34\x3c\xae\x0f\xc7\x93\x41\x8f\xd9\x2d\x55\xea\x8c\xd9\x53\xc4\x6e\x17\x5f\xbf\x84\x05\xa6\xea\x11\x5a\xa4\xf1\x82\xac\xa5\xc3\x8b\xee\x8d\x7d\x8a\x64\x30\x75\x01\x27\x75\xa1\x38\x61\x44\xe4\x4e\x72\x6a\xa4\xf3\xc7\x76\x06\x7c\xce\x22\x07\x8d\xf8\x88\x74\x83\x18\xdd\x96\x73\x6a\xc0\x51\x7c\x50\xf4\x98\xf8\xb0\x7e\x12\x5f\x91\x96\x39\x3b\x1f\x3b\xb3\x23\xd5\xf0\x04\x52\x67\xac\xfd\x78\x0e\x61\xf4\x8e\x63\x06\xf8\x01\x7b\xdc\xc5\xb3\x77\x09\xc4\x1b\x50\x67\x52\x0a\x6c\x24\x3a\xac\x2d\x7b\x7f\x18\x62\x54\x05\x0b\xae\x94\xd4\x3c\xc6\xe7\xcd\xf5\x6a\x92\xb8\x33\x89\x32\x21\x68\x76\xd1\x23\xc5\x3b\x56\x2d\x81\x14\xde\xbb\xf4\xcf\x1d\x5c\x4d\x82\x5d\x90\xf7\x34\xe7\xb7\xbf\x8e\xe7\x73\x8c\x06\xf1\xad\x35\x82\x14\x72\xbc\x3d\xb3\xa0\x5f\x7b\x7c\x85\xc6\x6f\x62\x45\x3e\x0a\x27\xbd\xd9\x44\x25\x09\x79\x7c\xb4\x63\x00\x5c\xb8\x16\x53\x93\xce\x3d\xc7\xad\x68\x54\x42\xb8\x74\x8b\xda\x30\x9c\xe7\xa0\xaf\xb7\xff\xb4\xe7\xa9\x0c\x15\xcf\x52\x79\xa6\x8e\x9d\xa0\x9a\xd3\xfe\x9a\x0b\xbe\x1f\xb9\xf1\x1c\x7f\x35\xc6\x73\x1b\xe9\x82\xef\x51\xb1\x27\x51\x92\x25\xe1\xd9\x3a\xe4\xa6\xd1\x59\x18\x13\xb1\x45\xb3\x59\x1c\xba\x29\xfc\xf1\x66\x69\xab\x7c\x49\x6d\xb6\x2b\xf2\x22\x0d\x40\x63\x65\x21\x35\x29\x28\xe9\xd9\x92\x4a\xf5\x27\xec\x00\x78\xc1\xe9\x41\xb4\x2f\xf6\x4f\x11\xb7\xec\x8c\xda\xf1\xb2\xa2\x82\x47\x32\xfc\x7e\xd0\xac\xcc\x88\x9f\x1c\xe6\x47\x18\x06\x6d\x63\x72\x6b\xaa\x54\x1e\x97\xe7\x9e\x0a\x48\x1d\x83\x5e\x19\xdb\x9b\x22\x71\xfb\xf7\x4c\x16\xec\xfc\x04\x19\xd7\xac\xb3\x00\x60\x74\xf7\xc9\xd1\xca\x31\x55\x45\x3a\x43\x78\x09\x90\x2b\x2a\xa2\xac\x3e\xb7\x07\x8a\xfa\x5b\x7d\x31\x05\xdf\x7f\x0d\xd6\x8d\xe2\x9f\x93\x96\xf0\x78\x8e\x75\x77\x35\xda\x86\x21\xf3\xd6\x70\x79\x6a\x4d\x3f\x79\x53\xac\xbb\x6d\xea\x5d\xdf\x1c\x5b\x58\x98\x30\x1b\x13\x40\x8d\x9a\xc4\x4f\x2a\xda\x5b\x66\x54\x1f\x7c\x69\xf4\x95\x74\xe5\x38\x09\xe8\xf8\x5c\xd0\xef\x36\x1e\x90\xdf\x34\x5b\xe7\x8f\xe4\xad\x98\xc4\x59\x75\xe4\xdf\xbb\x34\xc3\x15\x9a\xe6\x98\xd4\x45\x0f\x21\xa6\xcc\x8a\x74\x87\x84\x03\x53\x60\x9d\xe6\x5d\xbc\x3a\xdb\x16\x86\x8f\x28\xa9\x85\x6a\x32\xc6\x2f\xaf\x26\x60\x2f\x8e\xd7\x95\xe5\x3c\x8c\xf1\x30\xe6\xb6\x31\x88\xec\x22\xc8\xf3\x2c\xe9\xe6\x46\xf4\xe5\x71\x4b\xa2\xca\xc7\x2c\x89\x1b\xc1\x92\xff\x06\xff\x07\x00\x00\xff\xff\x02\x7c\x48\xd1\xa9\x0a\x00\x00")

func libKubecfgLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_libKubecfgLibsonnet,
		"lib/kubecfg.libsonnet",
	)
}

func libKubecfgLibsonnet() (*asset, error) {
	bytes, err := libKubecfgLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/kubecfg.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/kubecfg.libsonnet": libKubecfgLibsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"kubecfg.libsonnet": &bintree{libKubecfgLibsonnet, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

